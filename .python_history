from collection import defaultdict
import collection
[].find
[].index
[].indexOf
help([])
import heapq
help(heapq
)
x = []
heapq.heappush(x, 5)
heapq.heappush(x, 3)
x
x = [1] * 10
x
x = [[1] * 10] * 10
x
x[0][0] = 2
x
285+642
x = not not not not not True
x
T = int(input())
for _ in range(T):
    N = input()
    for index, digit in enumerate(N):
        if digit == '4':
            print(3, end="")
            print(1, end="")
        else:
            print(digit, end="")
            if index > 0: print(0, end="")
    print('')
    
T = int(input())
2
for _ in range(T):
    N = input()
    for index, digit in enumerate(N):
        if digit == '4':
            print(3, end="")
            print(1, end="")
        else:
            print(digit, end="")
            if index > 0: print(0, end="")
    print('')
1234
for _ in range(T):
    N = input()
    A, B = [], []
    for index, digit in enumerate(N):
        if digit == '4':
            A.append(3, end="")
            B.append(1, end="")
        else:
            A.append(digit, end="")
            if index > 0: B.append(0, end="")
    print("".join(A))
    print("".join(B))
1234
for _ in range(T):
    N = input()
    A, B = [], []
    for index, digit in enumerate(N):
        if digit == '4':
            A.append(3)
            B.append(1)
        else:
            A.append(digit)
            if index > 0: B.append(0)
    print("".join(A))
    print("".join(B))
for _ in range(T):
    N = input()
    A, B = [], []
    for index, digit in enumerate(N):
        if digit == '4':
            A.append(3)
            B.append(1)
        else:
            A.append(digit)
            if index > 0: B.append(0)
    print("".join(A))
    print("".join(B))
1234
4321
	for _ in range(T):
    N = input()
    A, B = [], []
    for index, digit in enumerate(N):
        if digit == '4':
            A.append('3')
            B.append('1')
        else:
            A.append(digit)
            if index > 0: B.append('0')
    print("".join(A))
for _ in range(T):
    N = input()
    A, B = [], []
    for index, digit in enumerate(N):
        if digit == '4':
            A.append('3')
            B.append('1')
        else:
            A.append(digit)
            if index > 0: B.append('0')
    print("".join(A))
    print("".join(B))
1234
4321
1233 + 001
1233 + 1
3321 + 1000
for _ in range(T):
    N = input()
    A, B = [], []
    notrailing = False
    for digit in N:
        if digit == '4':
            A.append('3')
            B.append('1')
            notrailing = True
        else:
            A.append(digit)
            if notrailing: B.append('0')
    print("".join(A))
    print("".join(B))
1234
4321
T = int(input())
for _ in range(T):
    N = input()
    A, B = [], []
    notrailing = False
    for digit in N:
        if digit == '4':
            A.append('3')
            B.append('1')
            notrailing = True
        else:
            A.append(digit)
            if notrailing: B.append('0')
    print("".join(A))
    print("".join(B))
for _ in range(T):
    N = input()
    A, B = [], []
    notrailing = False
    for digit in N:
        if digit == '4':
            A.append('3')
            B.append('1')
            notrailing = True
        else:
            A.append(digit)
            if notrailing: B.append('0')
    print("".join(A))
    print("".join(B))
4
123
for _ in range(T):
    N = input()
    A, B = [], []
    notrailing = False
    for digit in N:
        if digit == '4':
            A.append('3')
            B.append('1')
            notrailing = True
        else:
            A.append(digit)
            if notrailing: B.append('0')
    print("".join(A))
    if len(B) == 0:
        print('0')
    else:
        print("".join(B))
1234
3
T = 6
for _ in range(T):
    N = input()
    P = list(input())
    for lydia in P:
	    print('E' if lydia == 'S' else 'S', end="")
	print("")
for _ in range(T):
    N = input()
    P = list(input())
    for lydia in P:
	    print('E' if lydia == 'S' else 'S', end="")
    print("")
SSSSEEEE
for _ in range(T):
    N = input()
    P = list(input())
    for lydia in P:
	    print('E' if lydia == 'S' else 'S', end="")
    print("")
5
SSSSEEEE
5
SESESESE
5
SEESESSE
1
2
SE
2
ES
^ = 1
T = 1
for testcase in range(T):
    N, B, F = int(input()), int(input()) int(input())
    oracleText = [1] * N
    brokenWorkers = []
    for index in range(N):
        oracleText[index] = 0
        print("".join((str(bit) for bit in N)), flush=True)
        ret = str(input())
        if '0' not in ret:
            brokenWorkers.append(index)
        oracleText[index] = 1
    
    print("Case #%d: " % (testcase+1), end="")
    print (" ".join((str(index) for index in brokenWorkers)def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
T = int(input())
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
        
T = int(input())
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
        
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in N)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
run()
5
2
10
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            print("".join((str(bit) for bit in oracleText)), flush=True)
            ret = str(input())
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="")
        print (" ".join((str(index) for index in brokenWorkers)))
5
run()
5
2
10
01111
1111
11011
1111
11110
import sys
sys.stdin
sys.stdin.read()
sys.stdout.write("asdf")
x = "asdf"
sys.stdout.write(x)
help(sys.stdout.write)
def run():
    for testcase in range(T):
        N, B, F = int(input()), int(input()), int(input())
        oracleText = [1] * N
        brokenWorkers = []
        for index in range(N):
            oracleText[index] = 0
            # print("".join((str(bit) for bit in oracleText)), flush=True)
            sys.stdout.write("".join((str(bit) for bit in oracleText)))
            ret = sys.stdin.read()
            if '0' not in ret:
                brokenWorkers.append(index)
            oracleText[index] = 1
        print("Case #%d: " % (testcase+1), end="", flush=True)
        print (" ".join((str(index) for index in brokenWorkers)), flush=True)
run()
5
2
10
readline_str
"1 2 3"
x = "1 2 3"
x.split(" ")
N, B, F = [int(i) for i in input().split(" ")]
1 2 3
N
B
F
